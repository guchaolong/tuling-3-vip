server.port=8001
#注册到eureka服务端的微服务名称
spring.application.name=ms-consumer-feign-user
#注册到eureka服务端的地址
eureka.client.service-url.defaultZone=http://www.eureka9000.com:9000/eureka/
#点击具体的微服务，右下角是否显示ip
eureka.instance.prefer-ip-address=true
#显示微服务的名称
eureka.instance.instance-id=ms-consumer-feign-8001

#MS-PROVIDER-ORDER.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule

mybatis.configuration.map-underscore-to-camel-case=true



#配置数据库
#配置数据库
spring.datasource.druid.username=root
spring.datasource.druid.password=123456
spring.datasource.druid.jdbcUrl=jdbc:mysql://47.104.128.12:3306/tuling-cloud02
spring.datasource.druid.driverClassName=com.mysql.jdbc.Driver
#初始化时建立物理连接的个数
spring.datasource.druid.initialSize=5
#最小连接池数
spring.datasource.druid.minIdle=5
#最大连接池数量
spring.datasource.druid.maxActive=20
#获取连接时最大等待时间
spring.datasource.druid.maxWait=60000
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接
spring.datasource.druid.timeBetweenEvictionRunsMillis=60000
#毫秒的连接断开,直到连接池中的连接数到minIdle为止
spring.datasource.druid.minEvictableIdleTimeMillis=30000
#在连接池返回连接给调用者前用来对连接进行验证的查询 SQL，要求为一条查询语句
spring.datasource.druid.validationQuery=SELECT 1 FROM DUAL
#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
spring.datasource.druid.testWhileIdle=true
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource.druid.testOnBorrow=fasle
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource.druid.testOnReturn=fasle
# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭
spring.datasource.druid.poolPreparedStatements=true
spring.datasource.druid.filters=stat,wall
#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
#单个connnection独享一个statement cache，也就是说maxOpenPreparedStatements是针对单个connection链接的
spring.datasource.druid.maxPoolPreparedStatementPerConnectionSize=20
spring.datasource.druid.useGlobalDataSourceStat=true
spring.datasource.druid.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500


logging.level.com.tuling.dao=debug


#设置全局的超时时间(若ribbon+hystrix 不需要设置该超时，只要直接设置timeoutInMilliseconds就可以了)
ribbon.ReadTimeout=2000
ribbon.ConnectTimeout=2000

#开启feign支持hystrix 默认是关闭的

feign.hystrix.enabled=true

#设置日志级别
logging.level.com.tuling.api.MsCustomFeignOrderApi=debug
feign.client.config.ms-provider-order-feign-custom01.loggerLevel=full
#全局超时配置
#ribbon和hystrix的时候只要设置hystrix的超时时间就可以了(全局的配置)
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=3000
# 局部设置超时：
#hystrix.command.MsCustomFeignOrderApi#queryOrdersByUserId(Integer).execution.isolation.thread.timeoutInMilliseconds: 10000


#设置时间滑动窗口(默认10s)
hystrix.command.default.metrics.rollingStats.timeInMilliseconds=20000
#当熔断器打开的时候，多长时间内会拒绝所有的请求直接调用降级方法,过了该值就进入半开状态
hystrix.command.default.metrics.rollingStats.sleepWindowInMilliseconds=15000

#时间窗口中，请求的的次数失败的次数达到该值，熔断器就直接打开.
hystrix.command.default.circuitBreaker.requestVolumeThreshold=5
#时间窗口内，请求失败此事/请求总次数>60就直接打开
hystrix.command.default.circuitBreaker.errorThresholdPercentage=60



management.endpoint.health.show-details=always

# 全局关闭熔断：
hystrix.command.default.circuitBreaker.enabled=true

# 局部关闭熔断：
hystrix.command.MsCustomFeignOrderApi#queryAll().circuitBreaker.enabled=false







